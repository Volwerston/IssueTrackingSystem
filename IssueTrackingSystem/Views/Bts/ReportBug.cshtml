@model IssueTrackingSystem.ServiceReference1.Bug

@{
    ViewBag.Title = "Report Bug";
    Layout = "~/Views/Shared/_Main.cshtml";
}

@if (TempData["status"] != null)
{
    @Html.Hidden(TempData["status"].ToString(), TempData["status"].ToString(), new { id = "status" })
}
else
{
    @Html.Hidden("null", "null", new { id = "status" })
}

@if (TempData["message"] != null)
{
    @Html.Hidden(TempData["message"].ToString(), TempData["message"].ToString(), new { id = "message" })
}
else
{
    @Html.Hidden("null", "null", new { id = "message" })
}

<div style="padding: 10px 10px 10px 10px; margin: 10px 10px 10px 10px">
    <div class="row">
        <div class="col-md-offset-3 col-md-6" style="background-color: rgb(94, 179, 240); padding: 10px 10px 10px 10px;">
            @using (Html.BeginForm("ReportBug", "Bts", FormMethod.Post, new { enctype = "multipart/form-data", style="display:table;margin:auto" }))
            {

                @Html.AntiForgeryToken()
                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="form-group">
                        @Html.LabelFor(model => model.Subject, htmlAttributes: new { @class = "control-label col-md-3", id="subjectLabel" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Subject, new { htmlAttributes = new { @class = "form-control", id="subjectEditor" } })
                            @Html.ValidationMessageFor(model => model.Subject, "", new { @class = "text-danger", id="subjectValidator" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-3", id="descriptionLabel" })
                        <div class="col-md-9">
                            @Html.TextAreaFor(model => model.Description, 10, 40, new { id = "descriptionEditor" })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger", id = "descriptionValidator"  })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Attachments, new { htmlAttributes = new { @class = "control-label" } })
                        </div>
                        <div class="col-md-9">
                            <input type="file" name="Attachments" id="Attachments" multiple />
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-4 col-md-3">
                            <input type="submit" value="Create" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            }

        </div>
    </div>
</div>

@section scripts
{
    <script>

        $(document).ready(function () {

            $(":file").filestyle({ buttonText: "Find file" });

            if ($("#message").val() != "null") {
                displayMessage($("#status").val(), $("#message").val());
            }
        });

        $("#subjectEditor").focus(function () {
            $(this).removeClass("text-danger");
            $("#subjectLabel").removeClass("text-danger");
            $("#subjectValidator").text("");
        });

        $("#subjectEditor").blur(function ()
        {
            if($("#subjectEditor").val() == "")
            {
                $("#subjectEditor").addClass("text-danger");
                $("#subjectLabel").addClass("text-danger");
                $("#subjectValidator").text("Subject field cannot be empty");
            }
            else if($("#subjectEditor").val().length < 5)
            {
                $("#subjectEditor").addClass("text-danger");
                $("#subjectLabel").addClass("text-danger");
                $("#subjectValidator").text("Subject field must contain at least 5 characters");
            }
            else if($("#subjectEditor").val().length > 30)
            {
                $("#subjectEditor").addClass("text-danger");
                $("#subjectLabel").addClass("text-danger");
                $("#subjectValidator").text("Subject field must contain at most 30 characters");
            }
        });

        $("#descriptionEditor").focus(function () {
            $(this).removeClass("text-danger");
            $("#descriptionLabel").removeClass("text-danger");
            $("#descriptionValidator").text("");
        });

        $("#descriptionEditor").blur(function () {
            if ($("#descriptionEditor").val() == "") {
                $("#descriptionEditor").addClass("text-danger");
                $("#descriptionLabel").addClass("text-danger");
                $("#descriptionValidator").text("Description field cannot be empty");
            }
        });

    </script>
}