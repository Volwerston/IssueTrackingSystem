//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IssueTrackingSystem.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Project", Namespace="http://schemas.datacontract.org/2004/07/BTS.Models")]
    [System.SerializableAttribute()]
    public partial class Project : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] LogoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PmIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Logo {
            get {
                return this.LogoField;
            }
            set {
                if ((object.ReferenceEquals(this.LogoField, value) != true)) {
                    this.LogoField = value;
                    this.RaisePropertyChanged("Logo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PmId {
            get {
                return this.PmIdField;
            }
            set {
                if ((this.PmIdField.Equals(value) != true)) {
                    this.PmIdField = value;
                    this.RaisePropertyChanged("PmId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Bug", Namespace="http://schemas.datacontract.org/2004/07/BTS.Models")]
    [System.SerializableAttribute()]
    public partial class Bug : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime AddingTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Web.HttpPostedFileBase[] AttachmentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DeveloperIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EstimateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SolutionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StatusChangeDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TopicStarterField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime AddingTime {
            get {
                return this.AddingTimeField;
            }
            set {
                if ((this.AddingTimeField.Equals(value) != true)) {
                    this.AddingTimeField = value;
                    this.RaisePropertyChanged("AddingTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Web.HttpPostedFileBase[] Attachments {
            get {
                return this.AttachmentsField;
            }
            set {
                if ((object.ReferenceEquals(this.AttachmentsField, value) != true)) {
                    this.AttachmentsField = value;
                    this.RaisePropertyChanged("Attachments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DeveloperId {
            get {
                return this.DeveloperIdField;
            }
            set {
                if ((this.DeveloperIdField.Equals(value) != true)) {
                    this.DeveloperIdField = value;
                    this.RaisePropertyChanged("DeveloperId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Estimate {
            get {
                return this.EstimateField;
            }
            set {
                if ((this.EstimateField.Equals(value) != true)) {
                    this.EstimateField = value;
                    this.RaisePropertyChanged("Estimate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Solution {
            get {
                return this.SolutionField;
            }
            set {
                if ((object.ReferenceEquals(this.SolutionField, value) != true)) {
                    this.SolutionField = value;
                    this.RaisePropertyChanged("Solution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StatusChangeDate {
            get {
                return this.StatusChangeDateField;
            }
            set {
                if ((this.StatusChangeDateField.Equals(value) != true)) {
                    this.StatusChangeDateField = value;
                    this.RaisePropertyChanged("StatusChangeDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subject {
            get {
                return this.SubjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectField, value) != true)) {
                    this.SubjectField = value;
                    this.RaisePropertyChanged("Subject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TopicStarter {
            get {
                return this.TopicStarterField;
            }
            set {
                if ((object.ReferenceEquals(this.TopicStarterField, value) != true)) {
                    this.TopicStarterField = value;
                    this.RaisePropertyChanged("TopicStarter");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/BTS.Models")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] AvatarField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BirthDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ConfirmedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NicknameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurnameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Avatar {
            get {
                return this.AvatarField;
            }
            set {
                if ((object.ReferenceEquals(this.AvatarField, value) != true)) {
                    this.AvatarField = value;
                    this.RaisePropertyChanged("Avatar");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BirthDate {
            get {
                return this.BirthDateField;
            }
            set {
                if ((this.BirthDateField.Equals(value) != true)) {
                    this.BirthDateField = value;
                    this.RaisePropertyChanged("BirthDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Confirmed {
            get {
                return this.ConfirmedField;
            }
            set {
                if ((this.ConfirmedField.Equals(value) != true)) {
                    this.ConfirmedField = value;
                    this.RaisePropertyChanged("Confirmed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nickname {
            get {
                return this.NicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.NicknameField, value) != true)) {
                    this.NicknameField = value;
                    this.RaisePropertyChanged("Nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surname {
            get {
                return this.SurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.SurnameField, value) != true)) {
                    this.SurnameField = value;
                    this.RaisePropertyChanged("Surname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Notification", Namespace="http://schemas.datacontract.org/2004/07/BTS.Models")]
    [System.SerializableAttribute()]
    public partial class Notification : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReceiverField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime SendDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Receiver {
            get {
                return this.ReceiverField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceiverField, value) != true)) {
                    this.ReceiverField = value;
                    this.RaisePropertyChanged("Receiver");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SendDate {
            get {
                return this.SendDateField;
            }
            set {
                if ((this.SendDateField.Equals(value) != true)) {
                    this.SendDateField = value;
                    this.RaisePropertyChanged("SendDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sender {
            get {
                return this.SenderField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderField, value) != true)) {
                    this.SenderField = value;
                    this.RaisePropertyChanged("Sender");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/BTS.Models")]
    [System.SerializableAttribute()]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime AddingTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BugIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CorrectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> MessageToReplyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderNickField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserToReplyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime AddingTime {
            get {
                return this.AddingTimeField;
            }
            set {
                if ((this.AddingTimeField.Equals(value) != true)) {
                    this.AddingTimeField = value;
                    this.RaisePropertyChanged("AddingTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BugId {
            get {
                return this.BugIdField;
            }
            set {
                if ((this.BugIdField.Equals(value) != true)) {
                    this.BugIdField = value;
                    this.RaisePropertyChanged("BugId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Correct {
            get {
                return this.CorrectField;
            }
            set {
                if ((this.CorrectField.Equals(value) != true)) {
                    this.CorrectField = value;
                    this.RaisePropertyChanged("Correct");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageText {
            get {
                return this.MessageTextField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageTextField, value) != true)) {
                    this.MessageTextField = value;
                    this.RaisePropertyChanged("MessageText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> MessageToReplyId {
            get {
                return this.MessageToReplyIdField;
            }
            set {
                if ((this.MessageToReplyIdField.Equals(value) != true)) {
                    this.MessageToReplyIdField = value;
                    this.RaisePropertyChanged("MessageToReplyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SenderNick {
            get {
                return this.SenderNickField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderNickField, value) != true)) {
                    this.SenderNickField = value;
                    this.RaisePropertyChanged("SenderNick");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserToReply {
            get {
                return this.UserToReplyField;
            }
            set {
                if ((object.ReferenceEquals(this.UserToReplyField, value) != true)) {
                    this.UserToReplyField = value;
                    this.RaisePropertyChanged("UserToReply");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/BTS.Models")]
    [System.SerializableAttribute()]
    public partial class Category : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetProjectBugs", ReplyAction="http://tempuri.org/IService/GetProjectBugsResponse")]
        IssueTrackingSystem.ServiceReference1.Bug[] GetProjectBugs(IssueTrackingSystem.ServiceReference1.Project proj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetProjectBugs", ReplyAction="http://tempuri.org/IService/GetProjectBugsResponse")]
        System.Threading.Tasks.Task<IssueTrackingSystem.ServiceReference1.Bug[]> GetProjectBugsAsync(IssueTrackingSystem.ServiceReference1.Project proj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddSolutionOfBug", ReplyAction="http://tempuri.org/IService/AddSolutionOfBugResponse")]
        bool AddSolutionOfBug(int bugId, string solution);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddSolutionOfBug", ReplyAction="http://tempuri.org/IService/AddSolutionOfBugResponse")]
        System.Threading.Tasks.Task<bool> AddSolutionOfBugAsync(int bugId, string solution);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetDevIdForBug", ReplyAction="http://tempuri.org/IService/SetDevIdForBugResponse")]
        bool SetDevIdForBug(int bugId, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetDevIdForBug", ReplyAction="http://tempuri.org/IService/SetDevIdForBugResponse")]
        System.Threading.Tasks.Task<bool> SetDevIdForBugAsync(int bugId, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReportBug", ReplyAction="http://tempuri.org/IService/ReportBugResponse")]
        bool ReportBug(IssueTrackingSystem.ServiceReference1.Bug b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReportBug", ReplyAction="http://tempuri.org/IService/ReportBugResponse")]
        System.Threading.Tasks.Task<bool> ReportBugAsync(IssueTrackingSystem.ServiceReference1.Bug b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RestartBug", ReplyAction="http://tempuri.org/IService/RestartBugResponse")]
        bool RestartBug(int bugId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RestartBug", ReplyAction="http://tempuri.org/IService/RestartBugResponse")]
        System.Threading.Tasks.Task<bool> RestartBugAsync(int bugId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetBugStatus", ReplyAction="http://tempuri.org/IService/SetBugStatusResponse")]
        bool SetBugStatus(int bugId, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetBugStatus", ReplyAction="http://tempuri.org/IService/SetBugStatusResponse")]
        System.Threading.Tasks.Task<bool> SetBugStatusAsync(int bugId, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddProject", ReplyAction="http://tempuri.org/IService/AddProjectResponse")]
        bool AddProject(IssueTrackingSystem.ServiceReference1.Project proj, int[] categoryIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddProject", ReplyAction="http://tempuri.org/IService/AddProjectResponse")]
        System.Threading.Tasks.Task<bool> AddProjectAsync(IssueTrackingSystem.ServiceReference1.Project proj, int[] categoryIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetProjectsByName", ReplyAction="http://tempuri.org/IService/GetProjectsByNameResponse")]
        IssueTrackingSystem.ServiceReference1.Project[] GetProjectsByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetProjectsByName", ReplyAction="http://tempuri.org/IService/GetProjectsByNameResponse")]
        System.Threading.Tasks.Task<IssueTrackingSystem.ServiceReference1.Project[]> GetProjectsByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetProjectsByCategories", ReplyAction="http://tempuri.org/IService/GetProjectsByCategoriesResponse")]
        IssueTrackingSystem.ServiceReference1.Project[] GetProjectsByCategories(int[] categories,string lastId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetProjectsByCategories", ReplyAction="http://tempuri.org/IService/GetProjectsByCategoriesResponse")]
        System.Threading.Tasks.Task<IssueTrackingSystem.ServiceReference1.Project[]> GetProjectsByCategoriesAsync(int[] categories,string lastId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ApproveDeveloperForProject", ReplyAction="http://tempuri.org/IService/ApproveDeveloperForProjectResponse")]
        void ApproveDeveloperForProject(string projectName, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ApproveDeveloperForProject", ReplyAction="http://tempuri.org/IService/ApproveDeveloperForProjectResponse")]
        System.Threading.Tasks.Task ApproveDeveloperForProjectAsync(string projectName, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveDevsFromProject", ReplyAction="http://tempuri.org/IService/RemoveDevsFromProjectResponse")]
        bool RemoveDevsFromProject(string projName, int[] toErase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveDevsFromProject", ReplyAction="http://tempuri.org/IService/RemoveDevsFromProjectResponse")]
        System.Threading.Tasks.Task<bool> RemoveDevsFromProjectAsync(string projName, int[] toErase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InviteDeveloperToProject", ReplyAction="http://tempuri.org/IService/InviteDeveloperToProjectResponse")]
        bool InviteDeveloperToProject(string projectName, int devId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InviteDeveloperToProject", ReplyAction="http://tempuri.org/IService/InviteDeveloperToProjectResponse")]
        System.Threading.Tasks.Task<bool> InviteDeveloperToProjectAsync(string projectName, int devId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDevelopersOfProject", ReplyAction="http://tempuri.org/IService/GetDevelopersOfProjectResponse")]
        IssueTrackingSystem.ServiceReference1.GetDevelopersOfProjectResponse GetDevelopersOfProject(IssueTrackingSystem.ServiceReference1.GetDevelopersOfProjectRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDevelopersOfProject", ReplyAction="http://tempuri.org/IService/GetDevelopersOfProjectResponse")]
        System.Threading.Tasks.Task<IssueTrackingSystem.ServiceReference1.GetDevelopersOfProjectResponse> GetDevelopersOfProjectAsync(IssueTrackingSystem.ServiceReference1.GetDevelopersOfProjectRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ConfirmUser", ReplyAction="http://tempuri.org/IService/ConfirmUserResponse")]
        bool ConfirmUser(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ConfirmUser", ReplyAction="http://tempuri.org/IService/ConfirmUserResponse")]
        System.Threading.Tasks.Task<bool> ConfirmUserAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddAccount", ReplyAction="http://tempuri.org/IService/AddAccountResponse")]
        string AddAccount(IssueTrackingSystem.ServiceReference1.User u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddAccount", ReplyAction="http://tempuri.org/IService/AddAccountResponse")]
        System.Threading.Tasks.Task<string> AddAccountAsync(IssueTrackingSystem.ServiceReference1.User u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getNickname", ReplyAction="http://tempuri.org/IService/getNicknameResponse")]
        string getNickname(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getNickname", ReplyAction="http://tempuri.org/IService/getNicknameResponse")]
        System.Threading.Tasks.Task<string> getNicknameAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getUsers", ReplyAction="http://tempuri.org/IService/getUsersResponse")]
        IssueTrackingSystem.ServiceReference1.User[] getUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getUsers", ReplyAction="http://tempuri.org/IService/getUsersResponse")]
        System.Threading.Tasks.Task<IssueTrackingSystem.ServiceReference1.User[]> getUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/isEmailSent", ReplyAction="http://tempuri.org/IService/isEmailSentResponse")]
        bool isEmailSent(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/isEmailSent", ReplyAction="http://tempuri.org/IService/isEmailSentResponse")]
        System.Threading.Tasks.Task<bool> isEmailSentAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/searchForUsers", ReplyAction="http://tempuri.org/IService/searchForUsersResponse")]
        IssueTrackingSystem.ServiceReference1.User[] searchForUsers(int id, string[] userNames, string[] userStatuses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/searchForUsers", ReplyAction="http://tempuri.org/IService/searchForUsersResponse")]
        System.Threading.Tasks.Task<IssueTrackingSystem.ServiceReference1.User[]> searchForUsersAsync(int id, string[] userNames, string[] userStatuses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InformAboutNotification", ReplyAction="http://tempuri.org/IService/InformAboutNotificationResponse")]
        void InformAboutNotification(IssueTrackingSystem.ServiceReference1.User u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InformAboutNotification", ReplyAction="http://tempuri.org/IService/InformAboutNotificationResponse")]
        System.Threading.Tasks.Task InformAboutNotificationAsync(IssueTrackingSystem.ServiceReference1.User u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/WriteLetterToUser", ReplyAction="http://tempuri.org/IService/WriteLetterToUserResponse")]
        void WriteLetterToUser(IssueTrackingSystem.ServiceReference1.User u, string subject, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/WriteLetterToUser", ReplyAction="http://tempuri.org/IService/WriteLetterToUserResponse")]
        System.Threading.Tasks.Task WriteLetterToUserAsync(IssueTrackingSystem.ServiceReference1.User u, string subject, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetNotificationsOfUser", ReplyAction="http://tempuri.org/IService/GetNotificationsOfUserResponse")]
        IssueTrackingSystem.ServiceReference1.Notification[] GetNotificationsOfUser(string receiver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetNotificationsOfUser", ReplyAction="http://tempuri.org/IService/GetNotificationsOfUserResponse")]
        System.Threading.Tasks.Task<IssueTrackingSystem.ServiceReference1.Notification[]> GetNotificationsOfUserAsync(string receiver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditUserEmail", ReplyAction="http://tempuri.org/IService/EditUserEmailResponse")]
        bool EditUserEmail(int id, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditUserEmail", ReplyAction="http://tempuri.org/IService/EditUserEmailResponse")]
        System.Threading.Tasks.Task<bool> EditUserEmailAsync(int id, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditUserBirthDate", ReplyAction="http://tempuri.org/IService/EditUserBirthDateResponse")]
        bool EditUserBirthDate(int id, string birthdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditUserBirthDate", ReplyAction="http://tempuri.org/IService/EditUserBirthDateResponse")]
        System.Threading.Tasks.Task<bool> EditUserBirthDateAsync(int id, string birthdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ChangeUserPassword", ReplyAction="http://tempuri.org/IService/ChangeUserPasswordResponse")]
        bool ChangeUserPassword(string queryString, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ChangeUserPassword", ReplyAction="http://tempuri.org/IService/ChangeUserPasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangeUserPasswordAsync(string queryString, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAuthenticatedUser", ReplyAction="http://tempuri.org/IService/getAuthenticatedUserResponse")]
        IssueTrackingSystem.ServiceReference1.User getAuthenticatedUser(string nickname, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAuthenticatedUser", ReplyAction="http://tempuri.org/IService/getAuthenticatedUserResponse")]
        System.Threading.Tasks.Task<IssueTrackingSystem.ServiceReference1.User> getAuthenticatedUserAsync(string nickname, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditUserAvatar", ReplyAction="http://tempuri.org/IService/EditUserAvatarResponse")]
        bool EditUserAvatar(int id, byte[] avatar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditUserAvatar", ReplyAction="http://tempuri.org/IService/EditUserAvatarResponse")]
        System.Threading.Tasks.Task<bool> EditUserAvatarAsync(int id, byte[] avatar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/IsPasswordResetLinkValid", ReplyAction="http://tempuri.org/IService/IsPasswordResetLinkValidResponse")]
        bool IsPasswordResetLinkValid(string queryString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/IsPasswordResetLinkValid", ReplyAction="http://tempuri.org/IService/IsPasswordResetLinkValidResponse")]
        System.Threading.Tasks.Task<bool> IsPasswordResetLinkValidAsync(string queryString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddAttachments", ReplyAction="http://tempuri.org/IService/AddAttachmentsResponse")]
        bool AddAttachments(System.Web.HttpPostedFileBase[] attachments, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddAttachments", ReplyAction="http://tempuri.org/IService/AddAttachmentsResponse")]
        System.Threading.Tasks.Task<bool> AddAttachmentsAsync(System.Web.HttpPostedFileBase[] attachments, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveNotification", ReplyAction="http://tempuri.org/IService/RemoveNotificationResponse")]
        bool RemoveNotification(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveNotification", ReplyAction="http://tempuri.org/IService/RemoveNotificationResponse")]
        System.Threading.Tasks.Task<bool> RemoveNotificationAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteExpiredRecords", ReplyAction="http://tempuri.org/IService/deleteExpiredRecordsResponse")]
        void deleteExpiredRecords();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteExpiredRecords", ReplyAction="http://tempuri.org/IService/deleteExpiredRecordsResponse")]
        System.Threading.Tasks.Task deleteExpiredRecordsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/WriteMessage", ReplyAction="http://tempuri.org/IService/WriteMessageResponse")]
        void WriteMessage(string To, string From, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/WriteMessage", ReplyAction="http://tempuri.org/IService/WriteMessageResponse")]
        System.Threading.Tasks.Task WriteMessageAsync(string To, string From, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/MarkRightIssueAnswer", ReplyAction="http://tempuri.org/IService/MarkRightIssueAnswerResponse")]
        bool MarkRightIssueAnswer(int bugId, int selectedItemId, int estimate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/MarkRightIssueAnswer", ReplyAction="http://tempuri.org/IService/MarkRightIssueAnswerResponse")]
        System.Threading.Tasks.Task<bool> MarkRightIssueAnswerAsync(int bugId, int selectedItemId, int estimate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddMessageToWorkflow", ReplyAction="http://tempuri.org/IService/AddMessageToWorkflowResponse")]
        void AddMessageToWorkflow(int bugId, IssueTrackingSystem.ServiceReference1.Message message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddMessageToWorkflow", ReplyAction="http://tempuri.org/IService/AddMessageToWorkflowResponse")]
        System.Threading.Tasks.Task AddMessageToWorkflowAsync(int bugId, IssueTrackingSystem.ServiceReference1.Message message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getCategories", ReplyAction="http://tempuri.org/IService/getCategoriesResponse")]
        IssueTrackingSystem.ServiceReference1.Category[] getCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getCategories", ReplyAction="http://tempuri.org/IService/getCategoriesResponse")]
        System.Threading.Tasks.Task<IssueTrackingSystem.ServiceReference1.Category[]> getCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMessageLog", ReplyAction="http://tempuri.org/IService/GetMessageLogResponse")]
        IssueTrackingSystem.ServiceReference1.Message[] GetMessageLog(int bugId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMessageLog", ReplyAction="http://tempuri.org/IService/GetMessageLogResponse")]
        System.Threading.Tasks.Task<IssueTrackingSystem.ServiceReference1.Message[]> GetMessageLogAsync(int bugId);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetDevelopersOfProject", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetDevelopersOfProjectRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string projName;
        
        public GetDevelopersOfProjectRequest() {
        }
        
        public GetDevelopersOfProjectRequest(string projName) {
            this.projName = projName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetDevelopersOfProjectResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetDevelopersOfProjectResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public IssueTrackingSystem.ServiceReference1.User[] GetDevelopersOfProjectResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public IssueTrackingSystem.ServiceReference1.User[] invitedDevelopers;
        
        public GetDevelopersOfProjectResponse() {
        }
        
        public GetDevelopersOfProjectResponse(IssueTrackingSystem.ServiceReference1.User[] GetDevelopersOfProjectResult, IssueTrackingSystem.ServiceReference1.User[] invitedDevelopers) {
            this.GetDevelopersOfProjectResult = GetDevelopersOfProjectResult;
            this.invitedDevelopers = invitedDevelopers;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : IssueTrackingSystem.ServiceReference1.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<IssueTrackingSystem.ServiceReference1.IService>, IssueTrackingSystem.ServiceReference1.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public IssueTrackingSystem.ServiceReference1.Bug[] GetProjectBugs(IssueTrackingSystem.ServiceReference1.Project proj) {
            return base.Channel.GetProjectBugs(proj);
        }
        
        public System.Threading.Tasks.Task<IssueTrackingSystem.ServiceReference1.Bug[]> GetProjectBugsAsync(IssueTrackingSystem.ServiceReference1.Project proj) {
            return base.Channel.GetProjectBugsAsync(proj);
        }
        
        public bool AddSolutionOfBug(int bugId, string solution) {
            return base.Channel.AddSolutionOfBug(bugId, solution);
        }
        
        public System.Threading.Tasks.Task<bool> AddSolutionOfBugAsync(int bugId, string solution) {
            return base.Channel.AddSolutionOfBugAsync(bugId, solution);
        }
        
        public bool SetDevIdForBug(int bugId, int id) {
            return base.Channel.SetDevIdForBug(bugId, id);
        }
        
        public System.Threading.Tasks.Task<bool> SetDevIdForBugAsync(int bugId, int id) {
            return base.Channel.SetDevIdForBugAsync(bugId, id);
        }
        
        public bool ReportBug(IssueTrackingSystem.ServiceReference1.Bug b) {
            return base.Channel.ReportBug(b);
        }
        
        public System.Threading.Tasks.Task<bool> ReportBugAsync(IssueTrackingSystem.ServiceReference1.Bug b) {
            return base.Channel.ReportBugAsync(b);
        }
        
        public bool RestartBug(int bugId) {
            return base.Channel.RestartBug(bugId);
        }
        
        public System.Threading.Tasks.Task<bool> RestartBugAsync(int bugId) {
            return base.Channel.RestartBugAsync(bugId);
        }
        
        public bool SetBugStatus(int bugId, string status) {
            return base.Channel.SetBugStatus(bugId, status);
        }
        
        public System.Threading.Tasks.Task<bool> SetBugStatusAsync(int bugId, string status) {
            return base.Channel.SetBugStatusAsync(bugId, status);
        }
        
        public bool AddProject(IssueTrackingSystem.ServiceReference1.Project proj, int[] categoryIds) {
            return base.Channel.AddProject(proj, categoryIds);
        }
        
        public System.Threading.Tasks.Task<bool> AddProjectAsync(IssueTrackingSystem.ServiceReference1.Project proj, int[] categoryIds) {
            return base.Channel.AddProjectAsync(proj, categoryIds);
        }
        
        public IssueTrackingSystem.ServiceReference1.Project[] GetProjectsByName(string name) {
            return base.Channel.GetProjectsByName(name);
        }
        
        public System.Threading.Tasks.Task<IssueTrackingSystem.ServiceReference1.Project[]> GetProjectsByNameAsync(string name) {
            return base.Channel.GetProjectsByNameAsync(name);
        }
        
        public IssueTrackingSystem.ServiceReference1.Project[] GetProjectsByCategories(int[] categories, string lastId) {
            return base.Channel.GetProjectsByCategories(categories, lastId);
        }
        
        public System.Threading.Tasks.Task<IssueTrackingSystem.ServiceReference1.Project[]> GetProjectsByCategoriesAsync(int[] categories, string lastId) {
            return base.Channel.GetProjectsByCategoriesAsync(categories, lastId);
        }
        
        public void ApproveDeveloperForProject(string projectName, int userId) {
            base.Channel.ApproveDeveloperForProject(projectName, userId);
        }
        
        public System.Threading.Tasks.Task ApproveDeveloperForProjectAsync(string projectName, int userId) {
            return base.Channel.ApproveDeveloperForProjectAsync(projectName, userId);
        }
        
        public bool RemoveDevsFromProject(string projName, int[] toErase) {
            return base.Channel.RemoveDevsFromProject(projName, toErase);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveDevsFromProjectAsync(string projName, int[] toErase) {
            return base.Channel.RemoveDevsFromProjectAsync(projName, toErase);
        }
        
        public bool InviteDeveloperToProject(string projectName, int devId) {
            return base.Channel.InviteDeveloperToProject(projectName, devId);
        }
        
        public System.Threading.Tasks.Task<bool> InviteDeveloperToProjectAsync(string projectName, int devId) {
            return base.Channel.InviteDeveloperToProjectAsync(projectName, devId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IssueTrackingSystem.ServiceReference1.GetDevelopersOfProjectResponse IssueTrackingSystem.ServiceReference1.IService.GetDevelopersOfProject(IssueTrackingSystem.ServiceReference1.GetDevelopersOfProjectRequest request) {
            return base.Channel.GetDevelopersOfProject(request);
        }
        
        public IssueTrackingSystem.ServiceReference1.User[] GetDevelopersOfProject(string projName, out IssueTrackingSystem.ServiceReference1.User[] invitedDevelopers) {
            IssueTrackingSystem.ServiceReference1.GetDevelopersOfProjectRequest inValue = new IssueTrackingSystem.ServiceReference1.GetDevelopersOfProjectRequest();
            inValue.projName = projName;
            IssueTrackingSystem.ServiceReference1.GetDevelopersOfProjectResponse retVal = ((IssueTrackingSystem.ServiceReference1.IService)(this)).GetDevelopersOfProject(inValue);
            invitedDevelopers = retVal.invitedDevelopers;
            return retVal.GetDevelopersOfProjectResult;
        }
        
        public System.Threading.Tasks.Task<IssueTrackingSystem.ServiceReference1.GetDevelopersOfProjectResponse> GetDevelopersOfProjectAsync(IssueTrackingSystem.ServiceReference1.GetDevelopersOfProjectRequest request) {
            return base.Channel.GetDevelopersOfProjectAsync(request);
        }
        
        public bool ConfirmUser(int userId) {
            return base.Channel.ConfirmUser(userId);
        }
        
        public System.Threading.Tasks.Task<bool> ConfirmUserAsync(int userId) {
            return base.Channel.ConfirmUserAsync(userId);
        }
        
        public string AddAccount(IssueTrackingSystem.ServiceReference1.User u) {
            return base.Channel.AddAccount(u);
        }
        
        public System.Threading.Tasks.Task<string> AddAccountAsync(IssueTrackingSystem.ServiceReference1.User u) {
            return base.Channel.AddAccountAsync(u);
        }
        
        public string getNickname(string email) {
            return base.Channel.getNickname(email);
        }
        
        public System.Threading.Tasks.Task<string> getNicknameAsync(string email) {
            return base.Channel.getNicknameAsync(email);
        }
        
        public IssueTrackingSystem.ServiceReference1.User[] getUsers() {
            return base.Channel.getUsers();
        }
        
        public System.Threading.Tasks.Task<IssueTrackingSystem.ServiceReference1.User[]> getUsersAsync() {
            return base.Channel.getUsersAsync();
        }
        
        public bool isEmailSent(string email) {
            return base.Channel.isEmailSent(email);
        }
        
        public System.Threading.Tasks.Task<bool> isEmailSentAsync(string email) {
            return base.Channel.isEmailSentAsync(email);
        }
        
        public IssueTrackingSystem.ServiceReference1.User[] searchForUsers(int id, string[] userNames, string[] userStatuses) {
            return base.Channel.searchForUsers(id, userNames, userStatuses);
        }
        
        public System.Threading.Tasks.Task<IssueTrackingSystem.ServiceReference1.User[]> searchForUsersAsync(int id, string[] userNames, string[] userStatuses) {
            return base.Channel.searchForUsersAsync(id, userNames, userStatuses);
        }
        
        public void InformAboutNotification(IssueTrackingSystem.ServiceReference1.User u) {
            base.Channel.InformAboutNotification(u);
        }
        
        public System.Threading.Tasks.Task InformAboutNotificationAsync(IssueTrackingSystem.ServiceReference1.User u) {
            return base.Channel.InformAboutNotificationAsync(u);
        }
        
        public void WriteLetterToUser(IssueTrackingSystem.ServiceReference1.User u, string subject, string text) {
            base.Channel.WriteLetterToUser(u, subject, text);
        }
        
        public System.Threading.Tasks.Task WriteLetterToUserAsync(IssueTrackingSystem.ServiceReference1.User u, string subject, string text) {
            return base.Channel.WriteLetterToUserAsync(u, subject, text);
        }
        
        public IssueTrackingSystem.ServiceReference1.Notification[] GetNotificationsOfUser(string receiver) {
            return base.Channel.GetNotificationsOfUser(receiver);
        }
        
        public System.Threading.Tasks.Task<IssueTrackingSystem.ServiceReference1.Notification[]> GetNotificationsOfUserAsync(string receiver) {
            return base.Channel.GetNotificationsOfUserAsync(receiver);
        }
        
        public bool EditUserEmail(int id, string email) {
            return base.Channel.EditUserEmail(id, email);
        }
        
        public System.Threading.Tasks.Task<bool> EditUserEmailAsync(int id, string email) {
            return base.Channel.EditUserEmailAsync(id, email);
        }
        
        public bool EditUserBirthDate(int id, string birthdate) {
            return base.Channel.EditUserBirthDate(id, birthdate);
        }
        
        public System.Threading.Tasks.Task<bool> EditUserBirthDateAsync(int id, string birthdate) {
            return base.Channel.EditUserBirthDateAsync(id, birthdate);
        }
        
        public bool ChangeUserPassword(string queryString, string password) {
            return base.Channel.ChangeUserPassword(queryString, password);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeUserPasswordAsync(string queryString, string password) {
            return base.Channel.ChangeUserPasswordAsync(queryString, password);
        }
        
        public IssueTrackingSystem.ServiceReference1.User getAuthenticatedUser(string nickname, string password) {
            return base.Channel.getAuthenticatedUser(nickname, password);
        }
        
        public System.Threading.Tasks.Task<IssueTrackingSystem.ServiceReference1.User> getAuthenticatedUserAsync(string nickname, string password) {
            return base.Channel.getAuthenticatedUserAsync(nickname, password);
        }
        
        public bool EditUserAvatar(int id, byte[] avatar) {
            return base.Channel.EditUserAvatar(id, avatar);
        }
        
        public System.Threading.Tasks.Task<bool> EditUserAvatarAsync(int id, byte[] avatar) {
            return base.Channel.EditUserAvatarAsync(id, avatar);
        }
        
        public bool IsPasswordResetLinkValid(string queryString) {
            return base.Channel.IsPasswordResetLinkValid(queryString);
        }
        
        public System.Threading.Tasks.Task<bool> IsPasswordResetLinkValidAsync(string queryString) {
            return base.Channel.IsPasswordResetLinkValidAsync(queryString);
        }
        
        public bool AddAttachments(System.Web.HttpPostedFileBase[] attachments, int id) {
            return base.Channel.AddAttachments(attachments, id);
        }
        
        public System.Threading.Tasks.Task<bool> AddAttachmentsAsync(System.Web.HttpPostedFileBase[] attachments, int id) {
            return base.Channel.AddAttachmentsAsync(attachments, id);
        }
        
        public bool RemoveNotification(int id) {
            return base.Channel.RemoveNotification(id);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveNotificationAsync(int id) {
            return base.Channel.RemoveNotificationAsync(id);
        }
        
        public void deleteExpiredRecords() {
            base.Channel.deleteExpiredRecords();
        }
        
        public System.Threading.Tasks.Task deleteExpiredRecordsAsync() {
            return base.Channel.deleteExpiredRecordsAsync();
        }
        
        public void WriteMessage(string To, string From, string message) {
            base.Channel.WriteMessage(To, From, message);
        }
        
        public System.Threading.Tasks.Task WriteMessageAsync(string To, string From, string message) {
            return base.Channel.WriteMessageAsync(To, From, message);
        }
        
        public bool MarkRightIssueAnswer(int bugId, int selectedItemId, int estimate) {
            return base.Channel.MarkRightIssueAnswer(bugId, selectedItemId, estimate);
        }
        
        public System.Threading.Tasks.Task<bool> MarkRightIssueAnswerAsync(int bugId, int selectedItemId, int estimate) {
            return base.Channel.MarkRightIssueAnswerAsync(bugId, selectedItemId, estimate);
        }
        
        public void AddMessageToWorkflow(int bugId, IssueTrackingSystem.ServiceReference1.Message message) {
            base.Channel.AddMessageToWorkflow(bugId, message);
        }
        
        public System.Threading.Tasks.Task AddMessageToWorkflowAsync(int bugId, IssueTrackingSystem.ServiceReference1.Message message) {
            return base.Channel.AddMessageToWorkflowAsync(bugId, message);
        }
        
        public IssueTrackingSystem.ServiceReference1.Category[] getCategories() {
            return base.Channel.getCategories();
        }
        
        public System.Threading.Tasks.Task<IssueTrackingSystem.ServiceReference1.Category[]> getCategoriesAsync() {
            return base.Channel.getCategoriesAsync();
        }
        
        public IssueTrackingSystem.ServiceReference1.Message[] GetMessageLog(int bugId) {
            return base.Channel.GetMessageLog(bugId);
        }
        
        public System.Threading.Tasks.Task<IssueTrackingSystem.ServiceReference1.Message[]> GetMessageLogAsync(int bugId) {
            return base.Channel.GetMessageLogAsync(bugId);
        }
    }
}
